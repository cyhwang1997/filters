#IncludeRegexLine: ^[ 	]*[#%][ 	]*(include|import)[ 	]*[<"]([^">]+)([">])

#IncludeRegexScan: ^.*$

#IncludeRegexComplain: ^$

#IncludeRegexTransform: 

../bf/all.hpp
bf/bloom_filter/a2.hpp
../bf/bf/bloom_filter/a2.hpp
bf/bloom_filter/basic.hpp
../bf/bf/bloom_filter/basic.hpp
bf/bloom_filter/bitwise.hpp
../bf/bf/bloom_filter/bitwise.hpp
bf/bloom_filter/counting.hpp
../bf/bf/bloom_filter/counting.hpp
bf/bloom_filter/stable.hpp
../bf/bf/bloom_filter/stable.hpp

../bf/bitvector.hpp
iterator
-
limits
-
string
-
vector
-

../bf/bloom_filter.hpp
bf/wrap.hpp
-

../bf/bloom_filter/a2.hpp
bf/bloom_filter/basic.hpp
-

../bf/bloom_filter/basic.hpp
random
-
bf/bitvector.hpp
-
bf/bloom_filter.hpp
-
bf/hash.hpp
-

../bf/bloom_filter/bitwise.hpp
bf/bloom_filter/basic.hpp
-

../bf/bloom_filter/counting.hpp
bf/counter_vector.hpp
-
bf/bloom_filter.hpp
-
bf/hash.hpp
-

../bf/bloom_filter/stable.hpp
random
-
bf/bloom_filter/counting.hpp
-

../bf/counter_vector.hpp
cstdint
-
vector
-
bf/bitvector.hpp
-

../bf/h3.hpp
limits
-
random
-

../bf/hash.hpp
functional
-
bf/h3.hpp
-
bf/object.hpp
-

../bf/object.hpp
type_traits
-

../bf/wrap.hpp
string
-
type_traits
-
vector
-
bf/object.hpp
-

/home/ubuntu/libbf/test/test.hpp
unit_test_impl.hpp
/home/ubuntu/libbf/test/unit_test_impl.hpp

/home/ubuntu/libbf/test/tests.cpp
test.hpp
/home/ubuntu/libbf/test/test.hpp
bf/all.hpp
/home/ubuntu/libbf/test/bf/all.hpp

/home/ubuntu/libbf/test/unit_test.hpp
cmath
-
fstream
-
iostream
-
map
-
memory
-
mutex
-
sstream
-
string
-
thread
-
vector
-

/home/ubuntu/libbf/test/unit_test_impl.hpp
algorithm
-
cassert
-
cctype
-
condition_variable
-
cstdlib
-
cstring
-
regex
-
thread
-
unit_test.hpp
/home/ubuntu/libbf/test/unit_test.hpp

