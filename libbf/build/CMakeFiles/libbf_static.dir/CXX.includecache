#IncludeRegexLine: ^[ 	]*[#%][ 	]*(include|import)[ 	]*[<"]([^">]+)([">])

#IncludeRegexScan: ^.*$

#IncludeRegexComplain: ^$

#IncludeRegexTransform: 

../bf/bitvector.hpp
iterator
-
limits
-
string
-
vector
-

../bf/bloom_filter.hpp
bf/wrap.hpp
-

../bf/bloom_filter/a2.hpp
bf/bloom_filter/basic.hpp
-

../bf/bloom_filter/basic.hpp
random
-
bf/bitvector.hpp
-
bf/bloom_filter.hpp
-
bf/hash.hpp
-

../bf/bloom_filter/bitwise.hpp
bf/bloom_filter/basic.hpp
-

../bf/bloom_filter/counting.hpp
bf/counter_vector.hpp
-
bf/bloom_filter.hpp
-
bf/hash.hpp
-

../bf/bloom_filter/stable.hpp
random
-
bf/bloom_filter/counting.hpp
-

../bf/counter_vector.hpp
cstdint
-
vector
-
bf/bitvector.hpp
-

../bf/h3.hpp
limits
-
random
-

../bf/hash.hpp
functional
-
bf/h3.hpp
-
bf/object.hpp
-

../bf/object.hpp
type_traits
-

../bf/wrap.hpp
string
-
type_traits
-
vector
-
bf/object.hpp
-

/home/ubuntu/filters/libbf/src/bitvector.cpp
bf/bitvector.hpp
-
algorithm
-
cassert
-

/home/ubuntu/filters/libbf/src/bloom_filter/a2.cpp
bf/bloom_filter/a2.hpp
-
cassert
-

/home/ubuntu/filters/libbf/src/bloom_filter/basic.cpp
bf/bloom_filter/basic.hpp
-
cassert
-
cmath
-

/home/ubuntu/filters/libbf/src/bloom_filter/bitwise.cpp
bf/bloom_filter/bitwise.hpp
-

/home/ubuntu/filters/libbf/src/bloom_filter/counting.cpp
bf/bloom_filter/counting.hpp
-
algorithm
-
cassert
-
iostream
-

/home/ubuntu/filters/libbf/src/bloom_filter/stable.cpp
bf/bloom_filter/stable.hpp
-
cassert
-

/home/ubuntu/filters/libbf/src/counter_vector.cpp
bf/counter_vector.hpp
-
cassert
-

/home/ubuntu/filters/libbf/src/hash.cpp
bf/hash.hpp
-
stdexcept
-
cassert
-

